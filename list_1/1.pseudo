/*
Escreva um pseudocódigo para a busca linear e mostre,
usando invariância de laço, que o seu algoritmo está correto.
*/

função busca_linear(A, alvo) -> inteiro:
  para i de 1 até A.tamanho faça: // percorrendo todos os elementos de A
    se A[i] == alvo então: // se o elemento no indice i for igual ao alvo da busca
      retorne i;  // retorna o índice do elemento encontrado
  retorne 0;  // retorna 0 se o alvo não for encontrado em A

invariante de laço: Para todo k entre 1 e i o alvo da busca não se encontra em nenhum dos indices k.

- inicialização:
 No inicio i = 1, portanto temos o intervalo [1, i) = vazio, logo sabemos que não há nenhum
 indice que seja diferente do valor buscado, o que respeita o invariante

- após cada iteração:
 suponha que o invariante seja verdadeiro logo antes da iteração de número i, portanto temos
 duas possiveis situações:

 o elemento no indice i == alvo, e portanto o laço termina e o indice i é retornado
 ou
 o elemento no indice i != alvo, e portanto o laço irá avançar para a proxima iteração.
 Nessa situação sabemos que até o intervalo [1, i+1) o elemento não se encontra em nenhum desses indices
 o que está de acordo com o invariante do laço, pois no inicio da iteração i+1,
 sabemos que até aquele momento não encontramos o elemento buscado

- término:
 existem duas condições de termino do algoritmo:
 caso o elemento seja encontrado:
  dessa forma na iteração de número i o algoritmo termina
 
 e caso o elemento não seja encontrado:
  quando todos os elementos da lista forem verificados, isto é, o intervalo [1, tamanho+1)
  onde tamanho é o tamanho do array A
  Como a cada iteração que o elemento alvo não é encontrado o valor de i incrementa em 1,
  sabemos que em algum momento i == tamanho+1, finalizando o laço de repetição
  sendo que após o fim do laço o algoritmo retorna 0, indicando que não encontrou o elemento buscado

